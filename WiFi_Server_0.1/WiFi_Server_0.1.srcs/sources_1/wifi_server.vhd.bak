
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity wifi_server is
    port(
        clk		:	in	STD_LOGIC;
        rst		:	in	STD_LOGIC;
        rx		:	in	STD_LOGIC;
        tx		:	out	STD_LOGIC
    );
end wifi_server;

architecture Behavioral of wifi_server is

-- ##### components wifi_server @20170927 #####
COMPONENT wifi_server
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        data_stream_in_ack                :   IN    std_logic;
        cmd_over                          :   IN    std_logic;
        byte_to_tx                        :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        data_stream_rec_stb               :   IN    std_logic;
        data_stream_rec                   :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        model_cmd                         :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        rec_cmd_en                        :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        data_stream_send_stb              :   OUT   std_logic;
        data_stream_send                  :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        cmd_start                         :   OUT   std_logic;
        model_sel                         :   OUT   std_logic_vector(3 DOWNTO 0);  -- ufix4
        rec_data_en                       :   OUT   std_logic
        );
END COMPONENT;

-- ##### components receive_OK @20170927 #####	
COMPONENT receive_OK
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        data_stream_rec_stb               :   IN    std_logic;
        data_stream_rec                   :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        ce_out                            :   OUT   std_logic;
        model_cmd                         :   OUT   std_logic_vector(3 DOWNTO 0);  -- ufix4
        rec_cmd_en                        :   OUT   std_logic
        );
END COMPONENT;	

COMPONENT uart
    generic (
        baud                : positive;
        clock_frequency     : positive
    );
    port (  
        clock               :   in  std_logic;
        reset               :   in  std_logic;    
        data_stream_in      :   in  std_logic_vector(7 downto 0);
        data_stream_in_stb  :   in  std_logic;
        data_stream_in_ack  :   out std_logic;
        data_stream_out     :   out std_logic_vector(7 downto 0);
        data_stream_out_stb :   out std_logic;
        tx                  :   out std_logic;
        rx                  :   in  std_logic
    );
END COMPONENT;	


-- ##### signals #####
type tstring is array(natural range<>) of character;

constant N1 : natural := 11;
constant AT_CWMODE	  : tstring(0 to N1-1) := "AT+CWMODE=3";
constant N2 : natural := 23;
constant AT_CWJAP_Joint : tstring(0 to N2-1) := "AT+CWJAP=""UNT_DRONE"",""""";
constant N3 : natural := 25;
constant AT_static_IP : tstring(0 to N3-1) := "AT+CIPSTA=""192.168.43.70""";

--##############Act as a TCP client####################----
constant N4 : natural := 11;
constant AT_multiple_connect : tstring(0 to N4-1) := "AT+CIPMUX=1";
constant N5 : natural := 17;
constant AT_connect: tstring(0 to N5-1) := "AT+CIPSERVER=1,80";
--##############Begin transmit##################----
constant N6 : natural := 15;
constant AT_Transmit_len: tstring(0 to N6-1) := "AT+CIPSEND=0,10";

constant N7 : natural := 10;
subtype  BYETE_SIG is std_logic_vector(7 downto 0);
type TRANS_SIG  is array(N7-1 downto 0) of BYETE_SIG;
signal send_sig  : TRANS_SIG;

constant N9 : natural :=6;
constant AT_RST: tstring(0 to N9-1) := "AT+RST";	
	
constant Nmax: natural := 30;

signal byte_to_tx	: 	std_logic_vector(7 downto 0);
signal char_index	: 	natural range 0 to Nmax-1;
signal cnt_index    :  	std_logic_vector(7 downto 0);

signal	cmd_over	:	std_logic;	
signal	length_sig	:	std_logic_vector(5 downto 0);

signal	s_data_stream_send		:	std_logic_vector(7 downto 0);
signal	s_data_stream_send_stb	:	std_logic; 
signal	s_data_stream_in_ack	:	std_logic; 
signal	s_data_stream_out		:	std_logic_vector(7 downto 0);
signal	s_clk_enable			:	std_logic;
signal	s_model_cmd				:	std_logic_vector(3 DOWNTO 0);  -- ufix4   
signal	s_rec_cmd_en			:	std_logic                                 
signal	cmd_start				:	std_logic;
signal	model_sel				:	std_logic_vector(3 DOWNTO 0);  -- ufix4
signal	rec_data_en				:	std_logic;

	
begin
	
config_proc: process(clk, rst)
	begin
		if(rst = '1') then
			cnt_index <= (others => '0');
			cmd_over <= '0';
		elsif(clk'event and clk = '1') then
			char_index <= conv_integer(cnt_index);
			if(cmd_start = '1') then
				case model_sel is 
					when "0001" =>	-- AT+CWMODE
						length_sig	<= conv_std_logic_vector(N1, 6);
						byte_to_tx	<= std_logic_vector(to_unsigned(character'pos(AT_CWMODE(char_index))), 8);
							
					when "0010" =>	-- AT+CWJAP
						length_sig	<= conv_std_logic_vector(N2, 6);
						byte_to_tx	<= std_logic_vector(to_unsigned(character'pos(AT_CWJAP_Joint(char_index))), 8);
							
					when "0011" =>	-- AT+CIPSTA
						length_sig	<= conv_std_logic_vector(N3, 6);
						byte_to_tx	<= std_logic_vector(to_unsigned(character'pos(AT_static_IP(char_index))), 8);
							
					when "0100" =>	-- AT+CIPMUX=1
						length_sig	<= conv_std_logic_vector(N4, 6);
						byte_to_tx	<= std_logic_vector(to_unsigned(character'pos(AT_multiple_connect(char_index))), 8);
							
					when "0101" =>	-- AT+CIPSERVER=1,80
						length_sig	<= conv_std_logic_vector(N5, 6);
						byte_to_tx	<= std_logic_vector(to_unsigned(character'pos(AT_connect(char_index))), 8);
							
					when "0110" =>
						length_sig	<= conv_std_logic_vector(N6, 6);
						byte_to_tx	<= std_logic_vector(to_unsigned(character'pos(AT_Transmit_len(char_index))), 8);
							
					when "0111" =>
						length_sig	<= conv_std_logic_vector(N7, 6);
						byte_to_tx	<= send_sig(char_index);
							
					when "1001" =>
						length_sig	<= conv_std_logic_vector(N9, 6);
						byte_to_tx	<= std_logic_vector(to_unsigned(character'pos(AT_RST(char_index))), 8);
							
					when others =>
						length_sig	<= conv_std_logic_vector(Nmax, 6);
						byte_to_tx	<= (others => '0');
							
				end case
					
				if(data_stream_in_ack = '1') then	-- uart finish sending 1 byte
					if(cnt_index < length_sig - 1) then
						cnt_index <= cnt_index + 1;
						cmd_over <= '0';
					else
						cnt_index <= (others => '0');
						cmd_over  <= '1';
					end if;
				end if;									
			end if;
		end if;	
	end process;

-- ##### instantiate ##### --
inst_uart: uart
    generic map (
        baud                => 115200,			--: positive;
        clock_frequency     => 10000000000		--: positive
    );
    port (  
        clock               => clk,						--:   in  std_logic;
        reset               => rst,						--:   in  std_logic;    
        data_stream_in      => s_data_stream_send,		--:   in  std_logic_vector(7 downto 0);
        data_stream_in_stb  => s_data_stream_send_stb,	--:   in  std_logic;
        data_stream_in_ack  => s_data_stream_in_ack,	--:   out std_logic;
        data_stream_out     => s_data_stream_out,		--:   out std_logic_vector(7 downto 0);
        data_stream_out_stb => s_data_stream_out_stb,	--:   out std_logic;
        tx                  => 					--:   out std_logic;
        rx                  => 					--:   in  std_logic
    );

s_clk_enable	<= '1';

inst_wifi_server: wifi_server
  PORT MAP( 
  		clk                  =>	clk,						--:   IN    std_logic;
        reset                =>	rst,						--:   IN    std_logic;
        clk_enable           =>	s_clk_enable,				--:   IN    std_logic;
        data_stream_in_ack   =>	s_data_stream_in_ack,		--:   IN    std_logic;
        cmd_over             =>	cmd_over,					--:   IN    std_logic;
        byte_to_tx           =>	byte_to_tx,					--:   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        data_stream_rec_stb  =>	s_data_stream_rec_stb,		--:   IN    std_logic;
        data_stream_rec      =>	s_data_stream_out,			--:   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        model_cmd            =>	s_model_cmd,				--:   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        rec_cmd_en           =>	s_rec_cmd_en,				--:   IN    std_logic;
        ce_out               =>	open,						--:   OUT   std_logic;
        data_stream_send_stb =>	s_data_stream_out_stb,		--:   OUT   std_logic;
        data_stream_send     =>	s_data_stream_out,			--:   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        cmd_start            =>	cmd_start,					--:   OUT   std_logic;
        model_sel            =>	model_sel,					--:   OUT   std_logic_vector(3 DOWNTO 0);  -- ufix4
        rec_data_en          =>	rec_data_en					--:   OUT   std_logic
  );


-- ##### components receive_OK @20170927 #####	
inst_receive_OK: receive_OK
  PORT MAP( 
  		clk                  =>	clk,						--:   IN    std_logic;
        reset                =>	rst,						--:   IN    std_logic;
        clk_enable           =>	s_clk_enable,				--:   IN    std_logic;
        data_stream_rec_stb  =>	s_data_stream_out_stb,		--:   IN    std_logic;
        data_stream_rec      =>	s_data_stream_out,			--:   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        ce_out               =>	open,						--:   OUT   std_logic;
        model_cmd            =>	s_model_cmd,				--:   OUT   std_logic_vector(3 DOWNTO 0);  -- ufix4
        rec_cmd_en           =>	s_rec_cmd_en				--:   OUT   std_logic
  );


end Behavioral;
