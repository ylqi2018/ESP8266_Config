-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\Config_Client\Config_Client_mac.vhd
-- Created: 2017-08-18 11:42:52
-- 
-- Generated by MATLAB 8.6 and HDL Coder 3.7
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Config_Client_mac
-- Source Path: Config_Client/Config_Client_mac
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Config_Client_pkg.ALL;

ENTITY Config_Client_mac IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        data_stream_in_ack                :   IN    std_logic;
        rec_cmd_en                        :   IN    std_logic;
        model_cmd                         :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        cmd_start                         :   OUT   std_logic;
        model_sel                         :   OUT   std_logic_vector(3 DOWNTO 0);  -- ufix4
        data_stream_send_stb              :   OUT   std_logic;
        data_stream_send                  :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
        );
END Config_Client_mac;


ARCHITECTURE rtl OF Config_Client_mac IS

  -- Signals
  SIGNAL model_cmd_unsigned               : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL is_Config_Client_mac             : T_state_type_is_Config_Client_mac;  -- uint8
  SIGNAL model_sel_tmp                    : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL data_stream_send_tmp             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL cnt_wait                         : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL cmd_start_reg                    : std_logic;
  SIGNAL model_sel_reg                    : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL data_stream_send_stb_reg         : std_logic;
  SIGNAL data_stream_send_reg             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL is_Config_Client_mac_next        : T_state_type_is_Config_Client_mac;  -- enum type state_type_is_Config_Client_mac (24 enums)
  SIGNAL cnt_wait_next                    : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL cmd_start_reg_next               : std_logic;
  SIGNAL model_sel_reg_next               : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL data_stream_send_stb_reg_next    : std_logic;
  SIGNAL data_stream_send_reg_next        : unsigned(7 DOWNTO 0);  -- uint8

BEGIN
  model_cmd_unsigned <= unsigned(model_cmd);

  Config_Client_mac_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      is_Config_Client_mac <= IN_Initial;
      data_stream_send_stb_reg <= '0';
      data_stream_send_reg <= to_unsigned(16#00#, 8);
      cmd_start_reg <= '0';
      model_sel_reg <= to_unsigned(16#0#, 4);
      cnt_wait <= to_unsigned(16#00000000#, 32);
      --2.1.2
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        is_Config_Client_mac <= is_Config_Client_mac_next;
        cnt_wait <= cnt_wait_next;
        cmd_start_reg <= cmd_start_reg_next;
        model_sel_reg <= model_sel_reg_next;
        data_stream_send_stb_reg <= data_stream_send_stb_reg_next;
        data_stream_send_reg <= data_stream_send_reg_next;
      END IF;
    END IF;
  END PROCESS Config_Client_mac_1_process;

  Config_Client_mac_1_output : PROCESS (is_Config_Client_mac, data_stream_in_ack, rec_cmd_en, model_cmd_unsigned,
       cnt_wait, cmd_start_reg, model_sel_reg, data_stream_send_stb_reg,
       data_stream_send_reg)
    VARIABLE guard1 : std_logic;
    VARIABLE guard2 : std_logic;
    VARIABLE add_temp : unsigned(32 DOWNTO 0);
    VARIABLE add_temp_0 : unsigned(32 DOWNTO 0);
    VARIABLE add_temp_1 : unsigned(4 DOWNTO 0);
    VARIABLE add_temp_2 : unsigned(4 DOWNTO 0);
    VARIABLE add_temp_3 : unsigned(32 DOWNTO 0);
    VARIABLE add_temp_4 : unsigned(32 DOWNTO 0);
  BEGIN
    cmd_start_reg_next <= cmd_start_reg;
    model_sel_reg_next <= model_sel_reg;
    data_stream_send_stb_reg_next <= data_stream_send_stb_reg;
    data_stream_send_reg_next <= data_stream_send_reg;
    is_Config_Client_mac_next <= is_Config_Client_mac;
    cnt_wait_next <= cnt_wait;
    guard1 := '0';
    guard2 := '0';
    CASE is_Config_Client_mac IS
      WHEN IN_Initial =>
        is_Config_Client_mac_next <= IN_Tran_A;
        data_stream_send_stb_reg_next <= '1';
        data_stream_send_reg_next <= to_unsigned(16#41#, 8);
        --A
        cnt_wait_next <= to_unsigned(16#00000000#, 32);
      WHEN IN_Tran1_3 =>
        IF data_stream_in_ack = '1' THEN 
          is_Config_Client_mac_next <= IN_Tran1_Enter;
          data_stream_send_stb_reg_next <= '1';
          data_stream_send_reg_next <= to_unsigned(16#0D#, 8);
          --/r
        ELSIF ( NOT data_stream_in_ack) = '1' THEN 
          is_Config_Client_mac_next <= IN_Tran1_3;
          data_stream_send_stb_reg_next <= '1';
          data_stream_send_reg_next <= to_unsigned(16#33#, 8);
          --3
        END IF;
      WHEN IN_Tran1_A =>
        IF data_stream_in_ack = '1' THEN 
          is_Config_Client_mac_next <= IN_Tran1_T;
          data_stream_send_stb_reg_next <= '1';
          data_stream_send_reg_next <= to_unsigned(16#54#, 8);
          --T
        ELSIF ( NOT data_stream_in_ack) = '1' THEN 
          is_Config_Client_mac_next <= IN_Tran1_A;
          data_stream_send_stb_reg_next <= '1';
          data_stream_send_reg_next <= to_unsigned(16#41#, 8);
          --A
          cnt_wait_next <= to_unsigned(16#00000000#, 32);
        END IF;
      WHEN IN_Tran1_C =>
        IF data_stream_in_ack = '1' THEN 
          is_Config_Client_mac_next <= IN_Tran1_W;
          data_stream_send_stb_reg_next <= '1';
          data_stream_send_reg_next <= to_unsigned(16#57#, 8);
          --W
        ELSIF ( NOT data_stream_in_ack) = '1' THEN 
          is_Config_Client_mac_next <= IN_Tran1_C;
          data_stream_send_stb_reg_next <= '1';
          data_stream_send_reg_next <= to_unsigned(16#43#, 8);
          --C
        END IF;
      WHEN IN_Tran1_D =>
        IF data_stream_in_ack = '1' THEN 
          is_Config_Client_mac_next <= IN_Tran1_E;
          data_stream_send_stb_reg_next <= '1';
          data_stream_send_reg_next <= to_unsigned(16#45#, 8);
          --E
        ELSIF ( NOT data_stream_in_ack) = '1' THEN 
          is_Config_Client_mac_next <= IN_Tran1_D;
          data_stream_send_stb_reg_next <= '1';
          data_stream_send_reg_next <= to_unsigned(16#44#, 8);
          --D
        END IF;
      WHEN IN_Tran1_E =>
        IF data_stream_in_ack = '1' THEN 
          is_Config_Client_mac_next <= IN_Tran1_Equal;
          data_stream_send_stb_reg_next <= '1';
          data_stream_send_reg_next <= to_unsigned(16#3D#, 8);
          --=
        ELSIF ( NOT data_stream_in_ack) = '1' THEN 
          is_Config_Client_mac_next <= IN_Tran1_E;
          data_stream_send_stb_reg_next <= '1';
          data_stream_send_reg_next <= to_unsigned(16#45#, 8);
          --E
        END IF;
      WHEN IN_Tran1_Enter =>
        IF data_stream_in_ack = '1' THEN 
          is_Config_Client_mac_next <= IN_Tran1_Enter_1;
          data_stream_send_stb_reg_next <= '1';
          data_stream_send_reg_next <= to_unsigned(16#0A#, 8);
          --/n
        ELSIF ( NOT data_stream_in_ack) = '1' THEN 
          is_Config_Client_mac_next <= IN_Tran1_Enter;
          data_stream_send_stb_reg_next <= '1';
          data_stream_send_reg_next <= to_unsigned(16#0D#, 8);
          --/r
        END IF;
      WHEN IN_Tran1_Enter_1 =>
        IF ( NOT data_stream_in_ack) = '1' THEN 
          is_Config_Client_mac_next <= IN_Tran1_Enter_1;
          data_stream_send_stb_reg_next <= '1';
          data_stream_send_reg_next <= to_unsigned(16#0A#, 8);
          --/n
        ELSIF data_stream_in_ack = '1' THEN 
          is_Config_Client_mac_next <= IN_send_finish1;
          data_stream_send_stb_reg_next <= '0';
          data_stream_send_reg_next <= to_unsigned(16#00#, 8);
        END IF;
      WHEN IN_Tran1_Equal =>
        IF data_stream_in_ack = '1' THEN 
          is_Config_Client_mac_next <= IN_Tran1_3;
          data_stream_send_stb_reg_next <= '1';
          data_stream_send_reg_next <= to_unsigned(16#33#, 8);
          --3
        ELSIF ( NOT data_stream_in_ack) = '1' THEN 
          is_Config_Client_mac_next <= IN_Tran1_Equal;
          data_stream_send_stb_reg_next <= '1';
          data_stream_send_reg_next <= to_unsigned(16#3D#, 8);
          --=
        END IF;
      WHEN IN_Tran1_M =>
        IF data_stream_in_ack = '1' THEN 
          is_Config_Client_mac_next <= IN_Tran1_O;
          data_stream_send_stb_reg_next <= '1';
          data_stream_send_reg_next <= to_unsigned(16#4F#, 8);
          --O
        ELSIF ( NOT data_stream_in_ack) = '1' THEN 
          is_Config_Client_mac_next <= IN_Tran1_M;
          data_stream_send_stb_reg_next <= '1';
          data_stream_send_reg_next <= to_unsigned(16#4D#, 8);
          --M
        END IF;
      WHEN IN_Tran1_O =>
        IF data_stream_in_ack = '1' THEN 
          is_Config_Client_mac_next <= IN_Tran1_D;
          data_stream_send_stb_reg_next <= '1';
          data_stream_send_reg_next <= to_unsigned(16#44#, 8);
          --D
        ELSIF ( NOT data_stream_in_ack) = '1' THEN 
          is_Config_Client_mac_next <= IN_Tran1_O;
          data_stream_send_stb_reg_next <= '1';
          data_stream_send_reg_next <= to_unsigned(16#4F#, 8);
          --O
        END IF;
      WHEN IN_Tran1_Plus =>
        IF data_stream_in_ack = '1' THEN 
          is_Config_Client_mac_next <= IN_Tran1_C;
          data_stream_send_stb_reg_next <= '1';
          data_stream_send_reg_next <= to_unsigned(16#43#, 8);
          --C
        ELSIF ( NOT data_stream_in_ack) = '1' THEN 
          is_Config_Client_mac_next <= IN_Tran1_Plus;
          data_stream_send_stb_reg_next <= '1';
          data_stream_send_reg_next <= to_unsigned(16#2B#, 8);
          --+
        END IF;
      WHEN IN_Tran1_T =>
        IF data_stream_in_ack = '1' THEN 
          is_Config_Client_mac_next <= IN_Tran1_Plus;
          data_stream_send_stb_reg_next <= '1';
          data_stream_send_reg_next <= to_unsigned(16#2B#, 8);
          --+
        ELSIF ( NOT data_stream_in_ack) = '1' THEN 
          is_Config_Client_mac_next <= IN_Tran1_T;
          data_stream_send_stb_reg_next <= '1';
          data_stream_send_reg_next <= to_unsigned(16#54#, 8);
          --T
        END IF;
      WHEN IN_Tran1_W =>
        IF data_stream_in_ack = '1' THEN 
          is_Config_Client_mac_next <= IN_Tran1_M;
          data_stream_send_stb_reg_next <= '1';
          data_stream_send_reg_next <= to_unsigned(16#4D#, 8);
          --M
        ELSIF ( NOT data_stream_in_ack) = '1' THEN 
          is_Config_Client_mac_next <= IN_Tran1_W;
          data_stream_send_stb_reg_next <= '1';
          data_stream_send_reg_next <= to_unsigned(16#57#, 8);
          --W
        END IF;
      WHEN IN_Tran_A =>
        IF data_stream_in_ack = '1' THEN 
          is_Config_Client_mac_next <= IN_Tran_T;
          data_stream_send_stb_reg_next <= '1';
          data_stream_send_reg_next <= to_unsigned(16#54#, 8);
          --T
        ELSIF ( NOT data_stream_in_ack) = '1' THEN 
          is_Config_Client_mac_next <= IN_Tran_A;
          data_stream_send_stb_reg_next <= '1';
          data_stream_send_reg_next <= to_unsigned(16#41#, 8);
          --A
          cnt_wait_next <= to_unsigned(16#00000000#, 32);
        END IF;
      WHEN IN_Tran_Enter =>
        IF data_stream_in_ack = '1' THEN 
          is_Config_Client_mac_next <= IN_Tran_Enter_1;
          data_stream_send_stb_reg_next <= '1';
          data_stream_send_reg_next <= to_unsigned(16#0A#, 8);
          --/n
        ELSIF ( NOT data_stream_in_ack) = '1' THEN 
          is_Config_Client_mac_next <= IN_Tran_Enter;
          data_stream_send_stb_reg_next <= '1';
          data_stream_send_reg_next <= to_unsigned(16#0D#, 8);
          --/r
        END IF;
      WHEN IN_Tran_Enter_1 =>
        IF data_stream_in_ack = '1' THEN 
          is_Config_Client_mac_next <= IN_send_finish;
          data_stream_send_stb_reg_next <= '0';
          data_stream_send_reg_next <= to_unsigned(16#00#, 8);
        ELSIF ( NOT data_stream_in_ack) = '1' THEN 
          is_Config_Client_mac_next <= IN_Tran_Enter_1;
          data_stream_send_stb_reg_next <= '1';
          data_stream_send_reg_next <= to_unsigned(16#0A#, 8);
          --/n
        END IF;
      WHEN IN_Tran_T =>
        IF data_stream_in_ack = '1' THEN 
          is_Config_Client_mac_next <= IN_Tran_Enter;
          data_stream_send_stb_reg_next <= '1';
          data_stream_send_reg_next <= to_unsigned(16#0D#, 8);
          --/r
        ELSIF ( NOT data_stream_in_ack) = '1' THEN 
          is_Config_Client_mac_next <= IN_Tran_T;
          data_stream_send_stb_reg_next <= '1';
          data_stream_send_reg_next <= to_unsigned(16#54#, 8);
          --T
        END IF;
      WHEN IN_device_OK =>
        is_Config_Client_mac_next <= IN_Tran1_A;
        data_stream_send_stb_reg_next <= '1';
        data_stream_send_reg_next <= to_unsigned(16#41#, 8);
        --A
        cnt_wait_next <= to_unsigned(16#00000000#, 32);
      WHEN IN_device_OK1 =>
        is_Config_Client_mac_next <= IN_Initial;
        data_stream_send_stb_reg_next <= '0';
        data_stream_send_reg_next <= to_unsigned(16#00#, 8);
        cmd_start_reg_next <= '0';
        model_sel_reg_next <= to_unsigned(16#0#, 4);
        cnt_wait_next <= to_unsigned(16#00000000#, 32);
        --2.1.2
      WHEN IN_send_finish =>
        IF rec_cmd_en = '1' THEN 
          IF model_cmd_unsigned /= to_unsigned(16#1#, 4) THEN 
            -- ERROR or FAIL
            is_Config_Client_mac_next <= IN_Tran_A;
            data_stream_send_stb_reg_next <= '1';
            data_stream_send_reg_next <= to_unsigned(16#41#, 8);
            --A
            cnt_wait_next <= to_unsigned(16#00000000#, 32);
          ELSIF model_cmd_unsigned = to_unsigned(16#1#, 4) THEN 
            -- receive OK
            is_Config_Client_mac_next <= IN_wait_cnt1;
            add_temp_3 := resize(cnt_wait, 33) + to_unsigned(1, 33);
            IF add_temp_3(32) /= '0' THEN 
              cnt_wait_next <= X"FFFFFFFF";
            ELSE 
              cnt_wait_next <= add_temp_3(31 DOWNTO 0);
            END IF;
            data_stream_send_stb_reg_next <= '0';
            data_stream_send_reg_next <= to_unsigned(16#00#, 8);
          ELSE 
            guard1 := '1';
          END IF;
        ELSE 
          guard1 := '1';
        END IF;
      WHEN IN_send_finish1 =>
        IF rec_cmd_en = '1' THEN 
          IF model_cmd_unsigned /= to_unsigned(16#1#, 4) THEN 
            -- ERROR or FAIL
            is_Config_Client_mac_next <= IN_Tran1_A;
            data_stream_send_stb_reg_next <= '1';
            data_stream_send_reg_next <= to_unsigned(16#41#, 8);
            --A
            cnt_wait_next <= to_unsigned(16#00000000#, 32);
          ELSIF model_cmd_unsigned = to_unsigned(16#1#, 4) THEN 
            -- receive OK
            is_Config_Client_mac_next <= IN_wait_cnt2;
            add_temp_4 := resize(cnt_wait, 33) + to_unsigned(1, 33);
            IF add_temp_4(32) /= '0' THEN 
              cnt_wait_next <= X"FFFFFFFF";
            ELSE 
              cnt_wait_next <= add_temp_4(31 DOWNTO 0);
            END IF;
            data_stream_send_stb_reg_next <= '0';
            data_stream_send_reg_next <= to_unsigned(16#00#, 8);
          ELSE 
            guard2 := '1';
          END IF;
        ELSE 
          guard2 := '1';
        END IF;
      WHEN IN_wait_cnt1 =>
        IF cnt_wait < to_unsigned(50000000, 32) THEN 
          --0.05s
          is_Config_Client_mac_next <= IN_wait_cnt1;
          add_temp_0 := resize(cnt_wait, 33) + to_unsigned(1, 33);
          IF add_temp_0(32) /= '0' THEN 
            cnt_wait_next <= X"FFFFFFFF";
          ELSE 
            cnt_wait_next <= add_temp_0(31 DOWNTO 0);
          END IF;
          data_stream_send_stb_reg_next <= '0';
          data_stream_send_reg_next <= to_unsigned(16#00#, 8);
        ELSIF cnt_wait >= to_unsigned(50000000, 32) THEN 
          --0.05s
          is_Config_Client_mac_next <= IN_device_OK;
          add_temp_2 := resize(model_sel_reg, 5) + to_unsigned(16#01#, 5);
          IF add_temp_2(4) /= '0' THEN 
            model_sel_reg_next <= "1111";
          ELSE 
            model_sel_reg_next <= add_temp_2(3 DOWNTO 0);
          END IF;
          cnt_wait_next <= to_unsigned(16#00000000#, 32);
          cmd_start_reg_next <= '1';
        END IF;
      WHEN OTHERS => 
        IF cnt_wait < to_unsigned(50000000, 32) THEN 
          --0.05s
          is_Config_Client_mac_next <= IN_wait_cnt2;
          add_temp := resize(cnt_wait, 33) + to_unsigned(1, 33);
          IF add_temp(32) /= '0' THEN 
            cnt_wait_next <= X"FFFFFFFF";
          ELSE 
            cnt_wait_next <= add_temp(31 DOWNTO 0);
          END IF;
          data_stream_send_stb_reg_next <= '0';
          data_stream_send_reg_next <= to_unsigned(16#00#, 8);
        ELSIF cnt_wait >= to_unsigned(50000000, 32) THEN 
          --0.05s
          is_Config_Client_mac_next <= IN_device_OK1;
          add_temp_1 := resize(model_sel_reg, 5) + to_unsigned(16#01#, 5);
          IF add_temp_1(4) /= '0' THEN 
            model_sel_reg_next <= "1111";
          ELSE 
            model_sel_reg_next <= add_temp_1(3 DOWNTO 0);
          END IF;
          cnt_wait_next <= to_unsigned(16#00000000#, 32);
          cmd_start_reg_next <= '1';
        END IF;
    END CASE;
    IF guard2 = '1' THEN 
      IF ( NOT rec_cmd_en) = '1' THEN 
        is_Config_Client_mac_next <= IN_send_finish1;
        data_stream_send_stb_reg_next <= '0';
        data_stream_send_reg_next <= to_unsigned(16#00#, 8);
      END IF;
    END IF;
    IF guard1 = '1' THEN 
      IF ( NOT rec_cmd_en) = '1' THEN 
        is_Config_Client_mac_next <= IN_send_finish;
        data_stream_send_stb_reg_next <= '0';
        data_stream_send_reg_next <= to_unsigned(16#00#, 8);
      END IF;
    END IF;
  END PROCESS Config_Client_mac_1_output;

  cmd_start <= cmd_start_reg_next;
  model_sel_tmp <= model_sel_reg_next;
  data_stream_send_stb <= data_stream_send_stb_reg_next;
  data_stream_send_tmp <= data_stream_send_reg_next;

  model_sel <= std_logic_vector(model_sel_tmp);

  data_stream_send <= std_logic_vector(data_stream_send_tmp);

END rtl;

